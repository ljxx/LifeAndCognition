def isBuildModule = rootProject.ext.isBuildModule
if (isBuildModule) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

def config = rootProject.ext.android
def librarys = rootProject.ext.dependencies

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        if (isBuildModule) {
            applicationId "com.ylixiang.tool"
        }
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (isBuildModule) {
                manifest.srcFile 'src/main/toolmodule/AndroidManifest.xml'
//                java.srcDirs = ['src/main/java', 'src/main/module/java']
//                res.srcDirs = ['src/main/res', 'src/main/module/res']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //全部Module一起编译的时候剔除debug目录
                    exclude '**/toolmodule/**'
                }
            }
//            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //公共插件
    api project(':ylxcommonlib')

    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation librarys.junit
    androidTestImplementation librarys.runner
    androidTestImplementation librarys.espresso

    annotationProcessor librarys.arouterCompiler
}
